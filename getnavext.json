{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmName": {
            "type": "string",
			"defaultValue": "",
            "minLength": 3,
            "metadata": {
                "Description": "Select the name of the deployment"
            }
        },
        "AcceptEula": {
		    "type": "string",
            "defaultValue": "No",
            "allowedValues": [ "Yes", "No" ],
            "minLength": 3,
            "metadata": {
                "Description": "In order to deploy the VM, you need to accept the EULA, which can be found here: https://go.microsoft.com/fwlink/?linkid=861843"
            }
		},
        "RemoteDesktopAccess": {
		    "type": "string",
			"defaultValue": "",
            "minLength": 1,
            "metadata": {
                "Description": "Specify * (star) to allow all remote desktop access, specify - (minus) to deny all remote desktop access or provide an address range using CIDR notation, e.g. 10.0.0.0/24; an IP address; or a list of address ranges or IP addresses"
            }
		},
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D2_v3",
            "allowedValues": [
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_D2_v3",
                "Standard_D4_v3",
                "Standard_D8_v3",
                "Standard_D16_v3",
                "Standard_D2s_v3",
                "Standard_D4s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3"
            ],
            "metadata": {
                "Description": "Select the VM size of the deployment"
            }
        },
        "vmAdminUsername": {
            "type": "string",
            "defaultValue": "vmadmin",
            "minLength": 1,
            "metadata": {
                "Description": "Specify administrator user name for connecting to the VM"
            }
        },
        "navAdminUsername": {
            "type": "string",
            "defaultValue": "admin",
            "minLength": 1,
            "metadata": {
                "Description": "Specify administrator user name for NAV"
            }
        },
		"azureSqlAdminUsername": {
			"type": "string",
			"defaultValue": "sqladmin",
			"metadata": {
				"Description": "Specify SQL Administrator user name (only used if you select Azure SQL as your SQL Server)"
			}
		},
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "Description": "Specify administrator password for VM, NAV and SQL (if applicable)"
            }
        },
        "navDockerImage": {
            "type": "string",
            "defaultValue": "microsoft/dynamics-nav",
            "minLength": 1,
            "metadata": {
                "Description": "Select the NAV Docker Image to deploy. Replace -finus with -finca or -fingb to get other Financials localizations. Remove -finus to get W1."
            }
        },
        "registryUsername": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "Description": "Specify username for private Docker Registry (leave blank for public Docker hub == microsoft/dynamics-nav:<tag>)"
            }
        },
        "registryPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "Description": "Specify password for private Docker Registry (leave blank for public Docker hub == microsoft/dynamics-nav:<tag>)"
            }
        },
        "LicenseFileUri": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "Description": "Optional: Specify a secure Url of your NAV Partner License File for NAV. If you do not specify a license file Url here, you will have to upload the license manually later."
            }
        },
        "AppBacpacUri": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "Description": "Optional: Specify a secure Url of the app bacpac you want to use for the Docker image. If you do not specify an app bacpac, you will be using the NAV database in the Docker image."
            }
        },
        "TenantBacpacUri": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "Description": "Optional: Specify a secure Url of the tenant bacpac you want to use for the Docker image. If you do not specify an tenant bacpac, you will be using the NAV database in the Docker image."
            }
        },
        "SQLServerType": {
		    "type": "string",
            "defaultValue": "SQLExpress",
            "allowedValues": [ "SQLExpress", "AzureSQL" ],
            "metadata": {
                "Description": "Select SQL Server to use. SQLExpress will be running in the Container on the Virtual Machine (part of NAV Docker Image), AzureSQL will be deployed in the Resource group. Note that Azure SQL will add additional cost and you will need to specify App and Tenant Bacpac Uris as Azure Storage Shared Access Signature Urls."
            }
        },
        "IncludeAppUris": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "Description": "Optional: Specify a list of secure Urls of apps to be published and installed."
            }
        },
        "ClickOnce": {
		    "type": "string",
            "defaultValue": "No",
            "allowedValues": [ "Yes", "No" ],
            "metadata": {
                "Description": "Include ClickOnce deployed Windows Client"
            }
        },
        "Multitenant": {
		    "type": "string",
            "defaultValue": "No",
            "allowedValues": [ "Yes", "No" ],
            "metadata": {
                "Description": "Should NAV be setup for multi tenancy"
            }
        },
		"Office365UserName": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"Description": "Enter Office 365 Administrator Email (leave empty to skip Office 365 integration)"
			}
		},
		"Office365Password": {
			"type": "securestring",
			"defaultValue": "",
			"metadata": {
				"Description": "Enter Office 365 Administrator Password (leave empty if no Office 365 integration)"
			}
		},
        "CertificatePfxUrl": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "Description": "Optional: Specify a secure Url of your Certificate Pfx File. If you do not specify a certificate, you will get a Self Signed Certificate."
            }
        },
        "CertificatePfxPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "Description": "Optional: Password for Certificate Pfx File. If you do not specify a certificate password, you will get a Self Signed Certificate."
            }
        },
        "PublicDnsName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "Description": "Public DNS Name (CNAME record pointing to your VM). A # in the name will be replaced by the VM number. If you do not specify a public DNS name, you will get a Self Signed Certificate."
            }
        },
        "FinalSetupScriptUrl": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "Description": "Optional: Specify a Url to a PowerShell script that should be executed on the VM to do the final setup of the VM."
            }
        },
        "RunWindowsUpdate": {
		    "type": "string",
            "defaultValue": "No",
            "allowedValues": [ "Yes", "No" ],
            "metadata": {
                "Description": "Run Windows Update after Deployment (might take significant time)"
            }
        },
        "UseLetsEncryptCertificate": {
		    "type": "string",
            "defaultValue": "No",
            "allowedValues": [ "Yes", "No" ],
            "metadata": {
                "Description": "Specifies whether you want to use Lets Encrypt to generate a secure SSL certificate, which is valid for a 3 months. You also need to specify an email address of the person accepting the subscriber agreement for LetsEncrypt."
            }
        },
        "ContactEMailForLetsEncrypt": {
		    "type": "string",
            "defaultValue": "",
            "metadata": {
                "Description": "Specify the email address of the person accepting subscriber agreement for LetsEncrypt here https://letsencrypt.org/repository/"
            }
        }
    },
    "variables": {
        "imagePublisher": "MicrosoftWindowsServer",
        "imageOffer": "WindowsServer",
        "imageSku": "2016-Datacenter-with-containers",
        "storageAccountType": "Standard_LRS",
        "vmStorageAccountContainerName": "vhds",
        "publicIPAddressName": "[concat(parameters('vmName'), '_pip')]",
        "storageAccountName": "[concat('storage', uniqueString(resourceGroup().id))]",
        "networkSecurityGroupName": "networksecuritygroup",
		"azureSqlServer": "[concat('sql', replace(tolower(parameters('vmName')),'-',''))]",
		"azureSqlServerDnsName": "[concat(variables('azureSqlServer'),'.database.windows.net')]",
        "dnsName": "[tolower(parameters('vmName'))]",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "virtualNetworkName": "virtualnetwork",
        "server1Name": "[tolower(parameters('vmName'))]",
        "nic1Name": "[concat(parameters('vmName'),'_nic')]",
		"delimiters": [ ",", ";" ],
		"RdpAddresses": "[if(equals(parameters('RemoteDesktopAccess'),'-'),'',parameters('RemoteDesktopAccess'))]",
		"rdpSourceAddressPrefix": "[split(variables('RdpAddresses'),variables('delimiters'))]",
		"noOfAddresses": "[length(variables('rdpSourceAddressPrefix'))]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
        "accountid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/','Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "wadmetricsresourceid": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/', 'Microsoft.Compute/virtualMachines/', variables('server1Name'))]",
        "ScriptCommandToExecute": "powershell.exe -File  ",
		"SqlCollation": "Latin1_General_100_CS_AS"
    },
    "resources": [
		{
			"apiVersion": "2014-04-01-preview",
			"type": "Microsoft.Sql/servers",
			"name": "[variables('azureSqlServer')]",
			"location": "[resourceGroup().location]",
			"condition": "[equals(parameters('sqlServerType'),'AzureSQL')]",
			"tags": {
				"displayName": "SqlServer"
			},
			"properties": {
				"administratorLogin": "[parameters('azureSqlAdminUsername')]",
				"administratorLoginPassword": "[parameters('adminPassword')]",
				"version": "12.0"
			},
			"resources": [
				{
					"apiVersion": "2014-04-01-preview",
					"type": "firewallrules",
					"name": "AllowAllAzureIps",
					"location": "[resourceGroup().location]",
					"condition": "[equals(parameters('sqlServerType'),'AzureSQL')]",
					"dependsOn": [
						"[variables('azureSqlServer')]"
					],
					"properties": {
						"endIpAddress": "0.0.0.0",
						"startIpAddress": "0.0.0.0"
					}
				},
				{
					"apiVersion": "2014-04-01-preview",
					"type": "databases",
					"name": "App",
					"location": "[resourceGroup().location]",
					"condition": "[equals(parameters('sqlServerType'),'AzureSQL')]",
					"dependsOn": [
						"[concat('Microsoft.Sql/servers/', variables('azureSqlServer'))]"
					],
					"tags": {
						"displayName": "App Database"
					},
					"properties": {
						"collation": "[variables('SqlCollation')]",
						"edition": "Standard",
						"maxSizeBytes": "1073741824",
						"requestedServiceObjectiveName": "S0"
					},
					"resources": [
						{
							"apiVersion": "2014-04-01-preview",
							"type": "extensions",
							"name": "Import",
							"condition": "[equals(parameters('sqlServerType'),'AzureSQL')]",
							"dependsOn": [
								"[concat('Microsoft.Sql/servers/', variables('azureSqlServer'), '/databases/App')]"
							],
							"tags": {
								"displayName": "Import"
							},
							"properties": {
								"storageKeyType": "SharedAccessKey",
								"storageUri": "[split(parameters('AppBacpacUri'),'?')[0]]",
								"storageKey": "[concat('?',split(parameters('AppBacpacUri'),'?')[1])]",
								"administratorLogin": "[parameters('azureSqlAdminUsername')]",
								"administratorLoginPassword": "[parameters('adminPassword')]",
								"operationMode": "Import"
							}
						}
					]
				},
				{
					"apiVersion": "2014-04-01-preview",
					"type": "databases",
					"name": "Tenant",
					"location": "[resourceGroup().location]",
					"condition": "[equals(parameters('sqlServerType'),'AzureSQL')]",
					"dependsOn": [
						"[concat('Microsoft.Sql/servers/', variables('azureSqlServer'))]"
					],
					"tags": {
						"displayName": "Tenant Template"
					},
					"properties": {
						"collation": "[variables('SqlCollation')]",
						"edition": "Standard",
						"maxSizeBytes": "1073741824",
						"requestedServiceObjectiveName": "S0"
					},
					"resources": [
						{
							"apiVersion": "2014-04-01-preview",
							"type": "extensions",
							"name": "Import",
							"condition": "[equals(parameters('sqlServerType'),'AzureSQL')]",
							"dependsOn": [
								"[concat('Microsoft.Sql/servers/', variables('azureSqlServer'), '/databases/Tenant')]"
							],
							"tags": {
								"displayName": "Import"
							},
							"properties": {
								"storageKeyType": "SharedAccessKey",
								"storageUri": "[split(parameters('TenantBacpacUri'),'?')[0]]",
								"storageKey": "[concat('?',split(parameters('TenantBacpacUri'),'?')[1])]",
								"administratorLogin": "[parameters('azureSqlAdminUsername')]",
								"administratorLoginPassword": "[parameters('adminPassword')]",
								"operationMode": "Import"
							}
						}
					]
				}
			]
		},
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsName')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('networkSecurityGroupName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
					{
                        "name": "HTTP",
                        "properties": {
                            "description": "Http access",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 200,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "FILES",
                        "properties": {
                            "description": "File access",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 210,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "HTTPS",
                        "properties": {
                            "description": "Http access over Secure Socket Layer",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 220,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Client",
                        "properties": {
                            "description": "Access for Windows Client",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "7046",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 230,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Soap",
                        "properties": {
                            "description": "Access to Soap Web Services",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "7047",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 240,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "OData",
                        "properties": {
                            "description": "Access to OData Services",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "7048",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 250,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Developer",
                        "properties": {
                            "description": "Access to Developer Services",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "7049",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 260,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
		{
			"apiVersion": "2015-01-01",
			"type": "Microsoft.Resources/deployments",
			"name": "rdp-0",
			"condition": "[not(equals(parameters('RemoteDesktopAccess'),'-'))]",
			"dependsOn": [
				"[concat('Microsoft.Network/networkSecurityGroups/',variables('networkSecurityGroupName'))]"
			],
			"properties": {
				"mode":"Incremental",
				"parameters":{},
				"template": {
					"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"variables": {},
					"resources": [],
					"outputs": {}
				}
			}
		},       
		{
			"apiVersion": "2015-01-01",
			"type": "Microsoft.Resources/deployments",
			"name": "[concat('rdp-', copyIndex(1))]",
			"condition": "[not(equals(parameters('RemoteDesktopAccess'),'-'))]",
			"dependsOn": [
				"[concat('rdp-', copyIndex())]"
			],
			"copy": {
				"name": "iterator",
				"count": "[variables('noOfAddresses')]"
			},
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"variables": {},
					"resources": [
						{
							"apiVersion": "2016-09-01",
							"name": "[concat(variables('networkSecurityGroupName'),'/Rdp',copyIndex())]",
							"type": "Microsoft.Network/networkSecurityGroups/securityRules",
							"location":"[resourceGroup().location]",
							"properties":{
								"description": "Remote Desktop Access",
								"protocol": "Tcp",
								"sourcePortRange": "*",
								"destinationPortRange": "3389",
								"sourceAddressPrefix": "[variables('rdpSourceAddressPrefix')[copyIndex()]]",
								"destinationAddressPrefix": "*",
								"access": "Allow",
								"priority": "[add(copyIndex(),100)]",
								"direction": "Inbound"
							}
						}
					],
					"outputs": {}
				}
			}
		},
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
				"[concat('Microsoft.Network/networkSecurityGroups/',variables('networkSecurityGroupName'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nic1Name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('server1Name')]",
            "location": "[resourceGroup().location]",
			"condition": "[equals(parameters('acceptEula'),'Yes')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nic1Name'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('server1Name')]",
                    "adminUsername": "[parameters('vmAdminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "windowsConfiguration": {
                        "provisionVmAgent": "true"
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('server1Name'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nic1Name'))]"
                        }
                    ]
                }
            },
            "resources": []
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('server1Name'),'/vmextension1')]",
            "location": "[resourceGroup().location]",
			"condition": "[equals(parameters('acceptEula'),'Yes')]",
            "tags": {
                "displayName": "PowerShellScript2"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('server1Name'))]"
            ],
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[uri(deployment().properties.templateLink.uri, 'initialize.ps1')]"
                    ],
                    "commandToExecute": "[concat(variables('ScriptCommandToExecute'),'initialize.ps1',' -TemplateLink \"',deployment().properties.templateLink.uri,'\" -hostName \"',reference(variables('publicIPAddressName')).dnsSettings.fqdn,'\" -RemoteDesktopAccess \"',variables('RdpAddresses'),'\" -VMAdminUsername \"',trim(parameters('vmAdminUsername')),'\" -NAVAdminUsername \"',trim(parameters('navAdminUsername')),'\" -AzureSQLAdminUsername \"',trim(parameters('azureSqlAdminUsername')),'\" -AdminPassword \"',parameters('adminPassword'),'\" -navDockerImage \"',trim(parameters('navDockerImage')),'\" -registryUsername \"',parameters('registryUsername'),'\" -registryPassword \"',parameters('registryPassword'),'\" -LicenseFileUri \"',parameters('licenseFileUri'),'\" -SQLServerType \"',parameters('SQLServerType'),'\" -AzureSqlServer \"',if(equals(parameters('SQLServerType'),'AzureSQL'),variables('azureSqlServerDnsName'),''),'\" -AppBacpacUri \"',parameters('AppBacpacUri'),'\" -TenantBacpacUri \"',parameters('TenantBacpacUri'),'\" -IncludeAppUris \"',parameters('IncludeAppUris'),'\" -CertificatePfxUrl \"',parameters('CertificatePfxUrl'),'\" -CertificatePfxPassword \"',parameters('CertificatePfxPassword'),'\" -PublicDnsName \"',parameters('PublicDnsName'),'\" -Multitenant \"',parameters('Multitenant'),'\" -ClickOnce \"',parameters('ClickOnce'),'\" -Office365UserName \"',parameters('Office365UserName'),'\" -Office365Password \"',parameters('Office365Password'),'\" -finalSetupScriptUrl \"',parameters('finalSetupScriptUrl'),'\" -RunWindowsUpdate \"',parameters('RunWindowsUpdate'),'\" -UseLetsEncryptCertificate \"',parameters('UseLetsEncryptCertificate'),'\" -ContactEMailForLetsEncrypt \"',parameters('ContactEMailForLetsEncrypt'),'\" -style \"demo\"')]"
                },
                "protectedSettings": {}
            }
        }
    ]
}
